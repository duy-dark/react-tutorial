{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","value","Board","useState","arr","renderSquare","i","lines","includes","squares","isNil","lastX","lastO","element","map","key","App","status","history","Array","fill","stepNumber","xIsNext","isStart","player","operatorClick","position","backStep","state","setState","startGame","Object","assign","setPlayer","evt","target","resetGame","reselectPlayer","current","winner","calculateWinner","moves","step","move","row","col","desc","jumpTo","playerWinner","length","slice","push","concat","handleClick","onChange","type","id","name","htmlFor","disabled","a","b","c","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e4397204.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport { isNil } from 'lodash';\n\nfunction Square(props){\n  return (\n    <button\n      className={\"square \" + props.className}\n      onClick={() => props.onClick()}\n    >\n      {props.value}\n    </button>\n  );\n}\n\nfunction Board(props) {\n  const [arr] = useState([0, 1, 2]);\n\n  const renderSquare = (i) => {\n    let className = props.lines.includes(i) ? 'square-win ' : ''\n    if (props.squares[i] && props.squares[i] === 'X' && !isNil(props.lastX) && props.lastX === i) {\n      className += 'square-x'\n    }\n    if (props.squares[i] && props.squares[i] === 'O' && !isNil(props.lastO) && props.lastO === i) {\n      className += 'square-o'\n    }\n    return (\n      <Square\n        className={className}\n        value={props.squares[i]}\n        onClick={() => props.onClick(i)}\n      />\n    )\n  }\n\n  const element = arr.map(value => \n    <div key={value} className=\"board-row\">\n      {renderSquare(value * 3)}\n      {renderSquare(value * 3 + 1)}\n      {renderSquare(value * 3 + 2)}\n    </div>\n  )\n  return (\n    <div>\n      {element}\n    </div>\n  );\n}\n\nexport default function App() {\n  const [state, setState] = useState({\n    history: [{squares: Array(9).fill(null)}],\n    stepNumber: 0,\n    xIsNext: true,\n    isStart: false,\n    player: null,\n    operatorClick: false,\n    position: [],\n    backStep: null,\n    lastX: null,\n    lastO: null\n  })\n\n  let handleClick = (i) => {\n    const history = state.history.slice(0, state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    let position\n    if (!isNil(state.backStep)) {\n      position = [...state.position.slice(0, state.backStep)]\n    } else {\n      position = [...state.position]\n    }\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = state.xIsNext ? \"X\" : \"O\";\n    position.push(i);\n    setState(Object.assign({}, state, {\n      history: history.concat([\n        {\n          squares: squares\n        }\n      ]),\n      stepNumber: history.length,\n      xIsNext: !state.xIsNext,\n      position: position ,\n      backStep: !isNil(state.backStep) ? null : state.backStep,\n      lastX: squares[i] === 'X' ? i : state.lastX,\n      lastO: squares[i] === 'O' ? i : state.lastO\n    }));\n  }\n\n  let jumpTo = (step) => {\n    setState(Object.assign({}, state, {\n      stepNumber: step,\n      xIsNext: state.operatorClick ? (step % 2) === 0 : (step % 2) !== 0,\n      backStep: step\n    }));\n  }\n\n  let startGame = () => {\n    setState(Object.assign({}, state, {\n      isStart: true\n    }))\n  }\n\n  let setPlayer = (evt) => {\n    let player = evt.target.value\n    setState(Object.assign({}, state, {\n      player: player,\n      xIsNext: player === 'X',\n      operatorClick: player === 'X',\n      position: [],\n      backStep: null,\n      lastX: null,\n      lastO: null\n    }))\n  }\n\n  let resetGame = () => {\n    setState(Object.assign({}, state, {\n      history: [\n        {\n          squares: Array(9).fill(null)\n        }\n      ],\n      stepNumber: 0,\n      xIsNext: state.player === 'X',\n      position: [],\n      backStep: null,\n      lastX: null,\n      lastO: null\n    }))\n  }\n\n  let reselectPlayer = () => {\n    setState(Object.assign({}, state, {\n      history: [\n        {\n          squares: Array(9).fill(null)\n        }\n      ],\n      stepNumber: 0,\n      xIsNext: true,\n      isStart: false,\n      player: null,\n      operatorClick: false,\n      position: [],\n      backStep: null,\n      lastX: null,\n      lastO: null\n    }))\n  }\n\n  const history = state.history;\n  const current = history[state.stepNumber];\n  const winner = calculateWinner(current.squares);\n  const position = state.position;\n  const moves = history.map((step, move) => {\n    let row = position[move - 1] < 3 ? 1 : (position[move - 1] < 6 ? 2 : 3)\n    let col = position[move - 1] % 3 === 0 ? 1 : position[move - 1] % 3 + 1\n    const desc = move ?\n      'Go to move #' + move + ' (' + row + ',' + col + ')':\n      'Go to game start (row, col)';\n    return (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)}>{desc}</button>\n      </li>\n    );\n  });\n\n  let status;\n  if (winner) {\n    status = \"Winner: \" + winner.playerWinner;\n  } else {\n    if (history.length > 9) status = \"No winner: X and O tied \";\n    else status = \"Next player: \" + state.player;\n  }\n\n  let renderAreaPlay = () => {\n    return (\n      <div className=\"game-play\">\n        <div className=\"game-board\">\n          <Board\n            lastX={state.lastX}\n            lastO={state.lastO}\n            lines={winner ? winner.lines : []}\n            squares={current.squares}\n            onClick={i => handleClick(i)}\n          />\n          <div className=\"game-about\">\n            <div className=\"item item-yellow\">Player X</div>\n            <div className=\"item item-green\">Player O</div>\n            <div className=\"item item-red\">Player Winner</div>\n          </div>\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n        <div className=\"game-reset\">\n          <p>Reset history</p>\n          <button onClick={resetGame}>Reset</button>\n        </div>\n        <div className=\"game-reselect\">\n          <p>Re-select Players</p>\n          <button onClick={reselectPlayer}>Re-select Players</button>\n        </div>\n      </div>\n    );\n  }\n\n  let renderSelectPlayer = () => {\n    return (\n      <div className=\"game-player\">\n        <p className=\"game-player--title\">Choose player start</p>\n        <ul className=\"list-player\" onChange={setPlayer}>\n          <li className=\"player-item\">\n            <input type=\"radio\" id=\"playerX\" name=\"player\" value=\"X\"/>\n            <label htmlFor=\"playerX\">X</label>\n          </li>\n          <li className=\"player-item\">\n            <input type=\"radio\" id=\"playerO\" name=\"player\" value=\"O\"/>\n            <label htmlFor=\"playerO\">O</label>\n          </li>\n        </ul>\n        <button disabled={!state.player} onClick={startGame}>Start Game</button>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"game\">\n      { state.isStart ? renderAreaPlay() : renderSelectPlayer() }\n    </div>\n  );\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return {\n        playerWinner: squares[a],\n        lines: lines[i]\n      };\n    }\n  }\n  return null;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}