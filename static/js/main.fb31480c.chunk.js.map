{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Square","className","onClick","props","this","value","React","Component","Board","i","squares","renderSquare","calculateWinner","lines","length","a","b","c","App","handleClick","history","state","slice","stepNumber","xIsNext","setState","concat","jumpTo","step","operatorClick","startGame","player","isStart","console","log","setPlayer","evt","target","Array","fill","status","current","winner","moves","map","move","desc","key","onChange","type","id","name","htmlFor","disabled","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fb31480c.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass Square extends React.Component {\n  render() {\n    return (\n      <button\n        className=\"square\"\n        onClick={() => this.props.onClick()}\n      >\n        {this.props.value}\n      </button>\n    );\n  }\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return (\n      <Square\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null)\n        }\n      ],\n      stepNumber: 0,\n      xIsNext: true,\n      isStart: false,\n      player: null,\n      operatorClick: false\n    };\n  }\n\n\n  handleClick = (i) => {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n    this.setState({\n      history: history.concat([\n        {\n          squares: squares\n        }\n      ]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo = (step) => {\n    this.setState({\n      stepNumber: step,\n      xIsNext: this.state.operatorClick ? (step % 2) === 0 : (step % 2) !== 0\n    });\n  }\n\n  startGame = () => {\n    this.state.player && this.setState({\n      isStart: true\n    })\n    console.log(this.state.isStart, this.state.player)\n  }\n\n  setPlayer = (evt) => {\n    let player = evt.target.value\n    this.setState({\n      player: player,\n      xIsNext: player === 'X',\n      operatorClick: player === 'X'\n    })\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Go to move #' + move :\n        'Go to game start';\n      return (\n        <li key={move}>\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = \"Winner: \" + winner;\n    } else {\n      status = \"Next player: \" + this.state.player;\n    }\n\n    let renderAreaPlay = () => {\n      return (\n        <div className=\"game-play\">\n          <div className=\"game-board\">\n            <Board\n              squares={current.squares}\n              onClick={i => this.handleClick(i)}\n            />\n          </div>\n          <div className=\"game-info\">\n            <div>{status}</div>\n            <ol>{moves}</ol>\n          </div>\n        </div>\n      );\n    }\n\n    let renderSelectPlayer = () => {\n      return (\n        <div className=\"game-player\">\n          <p className=\"game-player--title\">Choose player start</p>\n          <ul className=\"list-player\" onChange={this.setPlayer}>\n            <li className=\"player-item\">\n              <input type=\"radio\" id=\"playerX\" name=\"player\" value=\"X\"/>\n              <label htmlFor=\"playerX\">X</label>\n            </li>\n            <li className=\"player-item\">\n              <input type=\"radio\" id=\"playerO\" name=\"player\" value=\"O\"/>\n              <label htmlFor=\"playerO\">O</label>\n            </li>\n          </ul>\n          <button disabled={!this.state.player} onClick={this.startGame}>Start Game</button>\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"game\">\n        { this.state.isStart ? renderAreaPlay() : renderSelectPlayer() }\n      </div>\n    );\n  }\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}